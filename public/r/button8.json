{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "button8",
  "type": "registry:component",
  "title": "Button8",
  "description": "Button8",
  "dependencies": [
    "motion"
  ],
  "registryDependencies": [
    "button"
  ],
  "files": [
    {
      "path": "src/registry/components/button8.tsx",
      "content": "'use client';\n\nimport { Button } from \"@/components/ui/button\";\nimport { motion } from 'motion/react';\nimport React, { SVGProps, useEffect, useRef, useState } from \"react\";\n\nconst ArrowForwardIcon = (props: SVGProps<SVGSVGElement>) => (\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1em\" height=\"1em\" viewBox=\"0 0 24 24\" {...props}>\n        <path fill=\"currentColor\" d=\"M16.175 13H4v-2h12.175l-5.6-5.6L12 4l8 8l-8 8l-1.425-1.4z\" />\n    </svg>\n);\n\nconst animationVariants = {\n    icon: {\n        initial: { opacity: 1 },\n        hover: (buttonWidth: number) => ({\n            x: -1 * buttonWidth,\n            opacity: 0,\n        }),\n    },\n    label: {\n        initial: { x: '0%' },\n        hover: { x: '-20%' },\n    },\n    arrow: {\n        initial: {\n            position: 'absolute' as const,\n            x: '100%',\n            opacity: 0\n        },\n        hover: {\n            x: 0,\n            opacity: 1\n        },\n    }\n};\n\nconst animationTransition = {\n    type: 'spring',\n    stiffness: 100,\n    damping: 20,\n};\n\nconst IconParkSolidApple = (props: SVGProps<SVGSVGElement>) => {\n    return (\n        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1em\" height=\"1em\" viewBox=\"0 0 48 48\" {...props}><path fill=\"currentColor\" d=\"M23.911 11.318c.082-2.232.71-4.192 1.866-5.83c1.163-1.647 3.086-2.817 5.717-3.48l.055.243v.424c0 .961-.233 2.064-.693 3.276c-.483 1.174-1.237 2.28-2.238 3.277c-.936.879-1.803 1.46-2.569 1.723c-.252.076-.599.15-1.018.217q-.558.087-1.12.15\"></path><path fill=\"currentColor\" stroke=\"currentColor\" strokeLinejoin=\"round\" strokeWidth=\"4\" d=\"M24.35 14.629c-2.972 0-5.036-2.63-7.969-2.63c-2.932 0-8.973 2.696-8.973 12c0 9.306 5.365 15.3 5.965 16c.6.701 1.987 2.5 4.137 2.5s4.503-1.709 6.84-1.709s5.279 1.71 7.2 1.71c1.92 0 2.71-.783 4.016-2.134s3.8-5.47 4.67-7.944c-1.433-.854-5.234-3.17-5.234-8.422q0-5.251 3.838-8.725Q36.322 12 33 12c-3.323 0-5.677 2.629-8.65 2.629Z\"></path></svg>\n    )\n};\n\nexport default function Button8() {\n    const [isHovered, setIsHovered] = useState(false);\n    const [buttonWidth, setButtonWidth] = useState(0);\n    const buttonRef = useRef<HTMLButtonElement>(null);\n\n    useEffect(() => {\n        const currentRef = buttonRef.current;\n        if (currentRef) {\n            setButtonWidth(currentRef.offsetWidth);\n        }\n    }, [buttonRef]);\n\n    return (\n        <Button\n            ref={buttonRef}\n            variant=\"default\"\n            size=\"lg\"\n            className=\"cursor-pointer relative overflow-hidden\"\n            onMouseEnter={() => setIsHovered(true)}\n            onMouseLeave={() => setIsHovered(false)}>\n            <motion.div\n                initial=\"initial\"\n                animate={isHovered ? \"hover\" : \"initial\"}\n                variants={animationVariants.icon}\n                custom={buttonWidth}\n                transition={animationTransition}\n            >\n                <IconParkSolidApple />\n            </motion.div>\n\n            <motion.div\n                initial=\"initial\"\n                animate={isHovered ? \"hover\" : \"initial\"}\n                variants={animationVariants.label}\n                transition={animationTransition}\n            >\n                <span>Sign in with Apple</span>\n            </motion.div>\n\n            <motion.div\n                initial=\"initial\"\n                animate={isHovered ? \"hover\" : \"initial\"}\n                variants={animationVariants.arrow}\n                transition={{\n                    ...animationTransition,\n                    delay: 0.1\n                }}\n                style={{\n                    right: Math.round(buttonWidth * 0.1)\n                }}\n            >\n                <ArrowForwardIcon />\n            </motion.div>\n        </Button>\n    );\n};",
      "type": "registry:component"
    }
  ]
}
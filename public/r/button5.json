{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "button5",
  "type": "registry:component",
  "title": "Button5",
  "description": "Button5",
  "dependencies": [
    "motion"
  ],
  "registryDependencies": [
    "button"
  ],
  "files": [
    {
      "path": "src/registry/components/button5.tsx",
      "content": "'use client';\n\nimport { Button } from \"@/components/ui/button\";\nimport { cn } from \"@/registry/lib/utils\";\nimport { motion } from 'motion/react';\nimport React, { useEffect, useState, useRef, SVGProps } from \"react\";\n\nconst LucideCheck = (props: SVGProps<SVGSVGElement>) => {\n    return (\n        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1em\" height=\"1em\" viewBox=\"0 0 24 24\" {...props}><path fill=\"none\" stroke=\"currentColor\" strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M20 6L9 17l-5-5\"></path></svg>\n    )\n};\n\nconst CreditCardIcon = (props: SVGProps<SVGSVGElement>) => {\n    return (\n        <svg {...props} xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\">\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M2.25 8.25h19.5M2.25 9h19.5m-16.5 5.25h6m-6 2.25h3m-3.75 3h15a2.25 2.25 0 0 0 2.25-2.25V6.75A2.25 2.25 0 0 0 19.5 4.5h-15a2.25 2.25 0 0 0-2.25 2.25v10.5A2.25 2.25 0 0 0 4.5 19.5Z\" />\n        </svg>\n    )\n};\n\nconst animationVariants = {\n    containerVariants: {\n        normal: (width: number | null) => ({\n            width: width ? width : 'auto',\n        }),\n        compact: {\n            width: 'fit-content',\n        }\n    },\n    progressVariants: {\n        initial: { width: \"0%\" },\n        animate: (progress: number) => ({\n            width: `${progress}%`,\n        })\n    },\n    contentVariants: {\n        visible: { opacity: 1 },\n        hidden: { opacity: 0 }\n    },\n    checkmarkVariants: {\n        hidden: { scale: 0 },\n        visible: { scale: 1.0 }\n    }\n};\n\nconst animationTransition = {\n    checkmarkTransitionDuration: 0.6\n};\n\nexport default function Button5() {\n    const [progress, setProgress] = useState<number>(0);\n    const clampedProgress = Math.min(Math.max(0, progress), 100);\n    const [startAnimation, setStartAnimation] = useState(false);\n    const [animationState, setAnimationState] = useState<'progress' | 'showing-check' | 'complete'>('progress');\n    const [buttonWidth, setButtonWidth] = useState<number | null>(null);\n    const completeTimeoutRef = useRef<NodeJS.Timeout | null>(null);\n    const buttonRef = useRef<HTMLButtonElement>(null);\n    const completeAnimationDurationMs = 2000;\n\n    useEffect(() => {\n        if (startAnimation) {\n            const interval = setInterval(() => {\n                setProgress(prev => {\n                    if (prev >= 100) {\n                        clearInterval(interval);\n                        setStartAnimation(false);\n                        return 100;\n                    }\n                    return prev + 10;\n                });\n            }, 250);\n            return () => clearInterval(interval);\n        }\n    }, [startAnimation]);\n\n    const runAnimation = () => {\n        setProgress(0);\n        setStartAnimation(true);\n    };\n\n    const handleComplete = () => {\n        setTimeout(() => {\n            setProgress(0);\n            setStartAnimation(false);\n        }, 200);\n    };\n\n    useEffect(() => {\n        const currentRef = buttonRef.current;\n        if (currentRef) {\n            setButtonWidth(currentRef.offsetWidth);\n        }\n    }, [buttonRef]);\n\n    useEffect(() => {\n        return () => {\n            if (completeTimeoutRef.current) {\n                clearTimeout(completeTimeoutRef.current);\n            }\n        };\n    }, []);\n\n    useEffect(() => {\n        if (clampedProgress >= 100 && animationState === 'progress') {\n            setTimeout(() => {\n                setAnimationState('showing-check');\n                completeTimeoutRef.current = setTimeout(() => {\n                    setAnimationState('complete');\n                    handleComplete();\n                }, completeAnimationDurationMs);\n            }, animationTransition.checkmarkTransitionDuration * 1000);\n        }\n        else if (clampedProgress < 100 && animationState !== 'progress') {\n            if (completeTimeoutRef.current) {\n                clearTimeout(completeTimeoutRef.current);\n                completeTimeoutRef.current = null;\n            }\n            setAnimationState('progress');\n        }\n    }, [clampedProgress, animationState]);\n\n    const isShowingCheckmarkAnimation = animationState === 'showing-check';\n\n    return (\n        <motion.div\n            className=\"inline-block\"\n            variants={animationVariants.containerVariants}\n            custom={buttonWidth}\n            animate={isShowingCheckmarkAnimation ? 'compact' : 'normal'}\n            transition={{ duration: animationTransition.checkmarkTransitionDuration, ease: \"easeInOut\" }}\n        >\n            <Button\n                ref={buttonRef}\n                onClick={() => runAnimation()}\n                variant=\"default\"\n                size=\"lg\"\n                className={cn(\n                    \"cursor-pointer relative overflow-hidden w-full transition-all\",\n                    isShowingCheckmarkAnimation ? \"aspect-square rounded-full p-0 disabled:opacity-100\" : ''\n                )}\n                disabled={isShowingCheckmarkAnimation}\n            >\n                {/* Progress overlay */}\n                <motion.div\n                    className=\"absolute left-0 top-0 h-full z-10\"\n                    style={{\n                        backgroundColor: \"#10B981\",\n                    }}\n                    variants={animationVariants.progressVariants}\n                    custom={clampedProgress}\n                    initial=\"initial\"\n                    animate=\"animate\"\n                    transition={{ ease: \"linear\" }}\n                />\n\n                {/* Content container */}\n                <motion.div\n                    className=\"relative z-20 flex items-center justify-center gap-3 w-full h-full\"\n                    variants={animationVariants.contentVariants}\n                    animate={isShowingCheckmarkAnimation ? 'hidden' : 'visible'}\n                >\n                    <span>Pay with credit card</span>\n                    <CreditCardIcon width={16} height={16} />\n                </motion.div>\n\n                {/* Complete Checkmark */}\n                <motion.div\n                    className=\"absolute inset-0 z-30 flex items-center justify-center gap-3\"\n                    variants={animationVariants.checkmarkVariants}\n                    initial=\"hidden\"\n                    animate={isShowingCheckmarkAnimation ? 'visible' : 'hidden'}\n                    transition={{ duration: 0.6, delay: 0.3 }}\n                >\n                    {isShowingCheckmarkAnimation && <LucideCheck className=\"text-primary-foreground size-6\" />}\n                </motion.div>\n            </Button>\n        </motion.div>\n    );\n};",
      "type": "registry:component"
    }
  ]
}
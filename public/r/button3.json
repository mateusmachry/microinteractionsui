{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "button3",
  "type": "registry:component",
  "title": "Button3",
  "description": "Button3",
  "dependencies": [
    "motion"
  ],
  "registryDependencies": [
    "button"
  ],
  "files": [
    {
      "path": "src/registry/button3/button3.tsx",
      "content": "'use client';\n\nimport { Button } from \"@/components/ui/button\";\nimport { motion } from 'framer-motion';\nimport React, { SVGProps, useState } from \"react\";\n\ntype AnimationDirection = 'from-top' | 'from-bottom';\n\nconst animationDirectionMap = {\n    'from-top': {\n        'background': {\n            initial: {\n                x: 0,\n                y: -50\n            },\n            hover: {\n                x: 0,\n                y: 0\n            },\n            exit: {\n                x: 0,\n                y: -50\n            }\n        },\n        'hoverContent': {\n            initial: {\n                x: 0,\n                y: -50\n            },\n            hover: {\n                x: 0,\n                y: 0\n            },\n            exit: {\n                x: 0,\n                y: -50\n            }\n        },\n        'defaultContent': {\n            initial: {\n                x: 0,\n                y: 0\n            },\n            hover: {\n                x: 0,\n                y: 50\n            },\n            exit: {\n                x: 0,\n                y: 0\n            }\n        }\n    },\n    'from-bottom': {\n        'background': {\n            initial: {\n                x: 0,\n                y: 50\n            },\n            hover: {\n                x: 0,\n                y: 0\n            },\n            exit: {\n                x: 0,\n                y: 50\n            }\n        },\n        'hoverContent': {\n            initial: {\n                x: 0,\n                y: 50\n            },\n            hover: {\n                x: 0,\n                y: 0\n            },\n            exit: {\n                x: 0,\n                y: 50\n            }\n        },\n        'defaultContent': {\n            initial: {\n                x: 0,\n                y: 0\n            },\n            hover: {\n                x: 0,\n                y: -50\n            },\n            exit: {\n                x: 0,\n                y: 0\n            }\n        }\n    },\n};\n\nconst animationVariants = {\n    background: {\n        initial: ({ animationDirection }: { animationDirection: AnimationDirection }) => ({\n            y: animationDirectionMap[animationDirection].background.initial.y,\n            x: animationDirectionMap[animationDirection].background.initial.x,\n            opacity: 0,\n            backgroundColor: 'transparent'\n        }),\n        hover: ({ bgColorOnHover, animationDirection }: { bgColorOnHover: string, animationDirection: AnimationDirection }) => ({\n            y: animationDirectionMap[animationDirection].background.hover.y,\n            x: animationDirectionMap[animationDirection].background.hover.x,\n            opacity: 1,\n            backgroundColor: bgColorOnHover\n        }),\n        exit: ({ animationDirection }: { animationDirection: AnimationDirection }) => ({\n            y: animationDirectionMap[animationDirection].background.exit.y,\n            x: animationDirectionMap[animationDirection].background.exit.x,\n            opacity: 0,\n            backgroundColor: 'transparent'\n        })\n    },\n    hoverContent: {\n        initial: ({ animationDirection }: { animationDirection: AnimationDirection }) => ({\n            y: animationDirectionMap[animationDirection].hoverContent.initial.y,\n            x: animationDirectionMap[animationDirection].hoverContent.initial.x,\n            opacity: 0\n        }),\n        hover: ({ textColorOnHover, animationDirection }: { textColorOnHover: string, animationDirection: AnimationDirection }) => ({\n            y: animationDirectionMap[animationDirection].hoverContent.hover.y,\n            x: animationDirectionMap[animationDirection].hoverContent.hover.x,\n            opacity: 1,\n            color: textColorOnHover\n        }),\n        exit: ({ animationDirection }: { animationDirection: AnimationDirection }) => ({\n            y: animationDirectionMap[animationDirection].hoverContent.exit.y,\n            x: animationDirectionMap[animationDirection].hoverContent.exit.x,\n            opacity: 0\n        })\n    },\n    defaultContent: {\n        initial: ({ animationDirection }: { animationDirection: AnimationDirection }) => ({\n            y: animationDirectionMap[animationDirection].defaultContent.initial.y,\n            x: animationDirectionMap[animationDirection].defaultContent.initial.x,\n            opacity: 1\n        }),\n        hover: ({ animationDirection }: { animationDirection: AnimationDirection }) => ({\n            y: animationDirectionMap[animationDirection].defaultContent.hover.y,\n            x: animationDirectionMap[animationDirection].defaultContent.hover.x,\n            opacity: 0\n        }),\n        exit: ({ animationDirection }: { animationDirection: AnimationDirection }) => ({\n            y: animationDirectionMap[animationDirection].defaultContent.exit.y,\n            x: animationDirectionMap[animationDirection].defaultContent.exit.x,\n            opacity: 1\n        })\n    }\n};\n\nconst animationTransition = {\n    type: 'tween',\n    ease: 'easeInOut',\n    duration: 0.5\n};\n\nconst MaterialSymbolsChevronRight = (props: SVGProps<SVGSVGElement>) => {\n    return (\n        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1em\" height=\"1em\" viewBox=\"0 0 24 24\" {...props}><path fill=\"currentColor\" d=\"M12.6 12L8 7.4L9.4 6l6 6l-6 6L8 16.6z\"></path></svg>\n    )\n}\n\nexport default function Button3() {\n    const [isHovered, setIsHovered] = useState(false);\n    const animationDirection: AnimationDirection = \"from-top\";\n\n    return (\n        <Button\n            variant=\"outline\"\n            size=\"lg\"\n            className=\"cursor-pointer overflow-hidden relative\"\n            onMouseEnter={() => setIsHovered(true)}\n            onMouseLeave={() => setIsHovered(false)}\n        >\n            <motion.div\n                className=\"absolute inset-0 w-full h-full rounded-md\"\n                initial=\"initial\"\n                animate={isHovered ? \"hover\" : \"initial\"}\n                variants={animationVariants.background}\n                custom={{ bgColorOnHover: \"var(--primary)\", animationDirection: animationDirection }}\n                transition={animationTransition}\n            />\n\n            <div className=\"relative z-10 w-full h-full flex flex-row justify-center items-center\">\n                <motion.div\n                    className=\"flex flex-row justify-center items-center gap-3 absolute inset-0 w-full\"\n                    initial=\"initial\"\n                    animate={isHovered ? \"hover\" : \"initial\"}\n                    variants={animationVariants.hoverContent}\n                    custom={{ textColorOnHover: \"var(--primary-foreground)\", animationDirection: animationDirection }}\n                    transition={animationTransition}\n                >\n                    <span>Sign up</span>\n                    <MaterialSymbolsChevronRight />\n                </motion.div>\n\n                <motion.div\n                    className=\"flex flex-row justify-center items-center gap-3 w-full\"\n                    initial=\"initial\"\n                    animate={isHovered ? \"hover\" : \"initial\"}\n                    variants={animationVariants.defaultContent}\n                    custom={{ animationDirection: animationDirection }}\n                    transition={animationTransition}\n                >\n                    <span>Sign up</span>\n                    <MaterialSymbolsChevronRight />\n                </motion.div>\n            </div>\n        </Button>\n    );\n};",
      "type": "registry:component"
    }
  ]
}
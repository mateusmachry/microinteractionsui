{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "theme-toggle2",
  "type": "registry:component",
  "title": "ThemeToggle2",
  "description": "ThemeToggle2",
  "dependencies": [
    "motion"
  ],
  "registryDependencies": [
    "button"
  ],
  "files": [
    {
      "path": "src/registry/theme-toggle2/theme-toggle2.tsx",
      "content": "'use client';\n\nimport React, { useEffect, useState } from \"react\";\nimport { cn } from \"@/lib/utils\";\nimport { motion } from 'framer-motion';\nimport { useTheme } from \"next-themes\";\nimport { MoonIcon, SunIcon } from \"lucide-react\";\n\ntype ToggleSize = 'default' | 'lg' | 'xl';\n\nconst toggleSizeMap = {\n    default: {\n        container: 'w-12 h-6',\n        checkbox: 'w-6 h-6',\n        icon: 'w-3 h-3',\n        offset: '24px',\n    },\n    lg: {\n        container: 'w-16 h-8',\n        checkbox: 'w-8 h-8',\n        icon: 'w-4 h-4',\n        offset: '32px',\n    },\n    xl: {\n        container: 'w-24 h-12',\n        checkbox: 'w-12 h-12',\n        icon: 'w-6 h-6',\n        offset: '48px',\n    },\n};\n\nconst animationVariants = {\n    toggle: {\n        light: (offset: string) => ({\n            left: '0px',\n            right: offset,\n        }),\n        dark: (offset: string) => ({\n            left: offset,\n            right: '0px',\n        })\n    },\n    sun: {\n        light: {\n            y: '0%',\n            x: '0%',\n            opacity: 1\n        },\n        dark: {\n            y: '-100%',\n            x: '100%',\n            opacity: 0\n        }\n    },\n    moon: {\n        light: {\n            y: '-100%',\n            x: '-100%',\n            opacity: 0\n        },\n        dark: {\n            y: '0%',\n            x: '0%',\n            opacity: 1\n        }\n    }\n};\n\nconst springTransition = {\n    type: \"spring\",\n    stiffness: 100,\n    damping: 30\n};\n\nexport default function ThemeToggle2() {\n    const { resolvedTheme, setTheme } = useTheme();\n    const [mounted, setMounted] = useState(false);\n\n    useEffect(() => {\n        setMounted(true);\n    }, []);\n\n    const handleToggle = () => {\n        const newState = resolvedTheme === 'light' ? 'dark' : 'light';\n        setTheme(newState);\n    };\n\n    if (!mounted) {\n        return null;\n    }\n\n    const isDark = resolvedTheme ? resolvedTheme === 'dark' : false;\n    const toggleSize: ToggleSize = 'default';\n    const selectedSize = toggleSizeMap[toggleSize];\n\n    return (\n        <div className=\"flex items-center justify-center\">\n            <div\n                className={cn(\n                    \"relative rounded-full cursor-pointer\",\n                    selectedSize.container,\n                    isDark ? \"bg-gray-800\" : \"bg-gray-200\",\n                )}\n                onClick={handleToggle}\n            >\n                <input\n                    type=\"checkbox\"\n                    className=\"hidden\"\n                    checked={isDark}\n                    onChange={handleToggle}\n                />\n                <motion.div\n                    className={cn(\n                        selectedSize.checkbox,\n                        \"absolute rounded-full flex items-center justify-center overflow-hidden\",\n                        isDark ?\n                            \"bg-black right-0 shadow-lg shadow-black/50\" :\n                            \"bg-white left-0 shadow-lg shadow-white/50\",\n                    )}\n                    animate={isDark ? 'dark' : 'light'}\n                    variants={animationVariants.toggle}\n                    custom={selectedSize.offset}\n                    transition={springTransition}\n                >\n                    <motion.div\n                        className=\"absolute\"\n                        initial=\"light\"\n                        animate={isDark ? 'dark' : 'light'}\n                        variants={animationVariants.sun}\n                        transition={springTransition}\n                    >\n                        <SunIcon className={selectedSize.icon} aria-hidden=\"true\"/>\n                    </motion.div>\n                    <motion.div\n                        className=\"absolute\"\n                        initial=\"light\"\n                        animate={isDark ? 'dark' : 'light'}\n                        variants={animationVariants.moon}\n                        transition={springTransition}\n                    >\n                        <MoonIcon\n                            className={cn(\n                                selectedSize.icon\n                            )}\n                            aria-hidden=\"true\"\n                        />\n                    </motion.div>\n                </motion.div>\n            </div>\n        </div>\n    );\n};",
      "type": "registry:component"
    }
  ]
}
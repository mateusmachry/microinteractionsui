{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "navbar1",
  "type": "registry:component",
  "title": "Navbar1",
  "description": "Navbar1",
  "dependencies": [
    "motion"
  ],
  "registryDependencies": [
    "button"
  ],
  "files": [
    {
      "path": "src/registry/navbar1/navbar1.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { cn } from '@/lib/utils';\nimport { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip';\nimport {\n    Avatar,\n    AvatarFallback,\n    AvatarImage,\n} from \"@/components/ui/avatar\";\nimport { Settings, Users, Star, ThumbsUp } from 'lucide-react';\n\ninterface SidebarContextValue {\n    selectedItemKey: string;\n    onItemSelected: (key: string) => void;\n};\n\nconst SidebarContext = React.createContext<SidebarContextValue | undefined>(undefined);\nfunction useSidebarContext() {\n    const context = React.useContext(SidebarContext);\n    if (!context) {\n      throw new Error('Sidebar components must be used within a Sidebar provider');\n    }\n    return context;\n};\n\nconst AvatarDemo = () => {\n    return (\n        <Avatar>\n            <AvatarImage src=\"https://github.com/shadcn.png\" alt=\"@shadcn\" />\n            <AvatarFallback>CN</AvatarFallback>\n        </Avatar>\n    )\n};\n\nexport default function Navbar1() {\n    const [selectedItemKey, setSelectedItemKey] = React.useState('followers');\n    \n    const contextValue = React.useMemo(() => ({\n        selectedItemKey,\n        onItemSelected: (key: string) => setSelectedItemKey(key)\n    }), [selectedItemKey]);\n\n    return (\n        <SidebarContext.Provider\n            value={contextValue}\n        >\n            <nav\n                className=\"w-18 flex flex-col items-center bg-background border-r py-8 px-4\"\n            >\n                <div className=\"h-full flex flex-col justify-between gap-8\">\n                    <SidebarHeader>\n                        <SidebarItem itemKey={\"profile\"} showActiveState={false} tooltip={\"Profile\"}>\n                            <AvatarDemo />\n                        </SidebarItem>\n                    </SidebarHeader>\n                    <SidebarContent>\n                        <SidebarItem itemKey={\"followers\"} showActiveState={true} tooltip={\"Followers\"}>\n                            <Users />\n                        </SidebarItem>\n                        <SidebarItem itemKey={\"likes\"} showActiveState={true} tooltip={\"Likes\"}>\n                            <ThumbsUp />\n                        </SidebarItem>\n                        <SidebarItem itemKey={\"favorites\"} showActiveState={true} tooltip={\"favorites\"}>\n                            <Star />\n                        </SidebarItem>\n                    </SidebarContent>\n                    <SidebarFooter>\n                        <SidebarItem itemKey={\"settings\"} showActiveState={true} tooltip={\"Settings\"}>\n                            <Settings />\n                        </SidebarItem>\n                    </SidebarFooter>\n                </div>\n            </nav>\n        </SidebarContext.Provider>\n    );\n};\n\nNavbar1.displayName = \"Sidebar1\";\n\ntype SidebarHeaderProps = React.ComponentProps<\"div\">;\n\nconst SidebarHeader = React.forwardRef<HTMLDivElement, SidebarHeaderProps>(\n    ({ className, children, ...props }, ref) => (\n        <div\n            ref={ref}\n            id=\"sidebar-header\"\n            className={cn(\"flex flex-col gap-4 after:border-b after:border-b-border\", className)}\n            {...props}\n        >\n            {children}\n        </div>\n    )\n);\nSidebarHeader.displayName = \"SidebarHeader\";\n\ntype SidebarContentProps = React.ComponentProps<\"div\">;\n\nconst SidebarContent = React.forwardRef<HTMLDivElement, SidebarContentProps>(\n    ({ className, children, ...props }, ref) => (\n        <div\n            ref={ref}\n            id=\"sidebar-content\"\n            className={cn(\"flex flex-col flex-1 gap-4\", className)}\n            {...props}\n        >\n            {children}\n        </div>\n    )\n);\n\nSidebarContent.displayName = \"SidebarContent\";\n\ntype SidebarFooterProps = React.ComponentProps<\"div\">;\n\nconst SidebarFooter = React.forwardRef<HTMLDivElement, SidebarFooterProps>(\n    ({ className, children, ...props }, ref) => (\n        <div\n            ref={ref}\n            id=\"sidebar-footer\"\n            className={cn(\"flex flex-col gap-4 before:border-t before:border-t-border\", className)}\n            {...props}\n        >\n            {children}\n        </div>\n    )\n);\n\nSidebarFooter.displayName = \"SidebarFooter\";\n\ntype SidebarItemProps = React.ComponentProps<\"div\"> & {\n    itemKey: string;\n    showActiveState?: boolean;\n    tooltip?: React.ReactNode;\n};\n\nconst SidebarItem = React.forwardRef<HTMLDivElement, SidebarItemProps>(\n    ({\n        itemKey,\n        showActiveState = true,\n        tooltip,\n        className,\n        children,\n        ...props\n    }, ref) => {\n        const { selectedItemKey, onItemSelected } = useSidebarContext();\n        const isSelected = itemKey === selectedItemKey && showActiveState;\n\n        const content = (\n            <div\n                ref={ref}\n                className={cn(\"relative cursor-pointer\", className)}\n                onClick={() => onItemSelected(itemKey)}\n                {...props}\n            >\n                <AnimatePresence>\n                    {isSelected && (\n                        <motion.div\n                            className={cn(\n                                \"absolute inset-0 rounded-lg\",\n                                \"bg-neutral-800 hover:bg-neutral-900\",\n                            )}\n                            initial={{ scale: 0 }}\n                            animate={{ scale: 1 }}\n                            exit={{ scale: 0, opacity: 0 }}\n                            transition={{\n                                type: 'spring',\n                                stiffness: 100,\n                                damping: 10,\n                            }}\n                        />\n                    )}\n                </AnimatePresence>\n                <motion.div\n                    className={cn(\n                        \"flex flex-col justify-center items-center px-2 py-3 relative z-10\",\n                        isSelected ? \"text-white\" : \"text-[#707070] hover:text-black hover:dark:text-white\"\n                    )}\n                    layout\n                >\n                    {children}\n                </motion.div>\n            </div>\n        );\n\n        if (tooltip) {\n            return (\n                <TooltipProvider>\n                    <Tooltip>\n                        <TooltipTrigger asChild>\n                            {content}\n                        </TooltipTrigger>\n                        <TooltipContent side=\"right\">\n                            {tooltip}\n                        </TooltipContent>\n                    </Tooltip>\n                </TooltipProvider>\n            );\n        }\n\n        return content;\n    }\n);\n\nSidebarItem.displayName = \"SidebarItem\";",
      "type": "registry:component"
    }
  ]
}
{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "input1",
  "type": "registry:component",
  "title": "Input1",
  "description": "Input1",
  "dependencies": [
    "motion"
  ],
  "registryDependencies": [
    "button"
  ],
  "files": [
    {
      "path": "src/registry/input1/input1.tsx",
      "content": "\"use client\";\n\nimport { Badge } from \"@/components/ui/badge\";\nimport { SVGProps, useEffect, useRef, useState } from \"react\";\nimport { motion, AnimatePresence } from \"framer-motion\";\n\nconst EditIcon = (props: SVGProps<SVGSVGElement>) => {\n    return (\n        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1em\" height=\"1em\" viewBox=\"0 0 24 24\" {...props}>\n            <path fill=\"currentColor\" d=\"m11.4 18.161l7.396-7.396a10.3 10.3 0 0 1-3.326-2.234a10.3 10.3 0 0 1-2.235-3.327L5.839 12.6c-.577.577-.866.866-1.114 1.184a6.6 6.6 0 0 0-.749 1.211c-.173.364-.302.752-.56 1.526l-1.362 4.083a1.06 1.06 0 0 0 1.342 1.342l4.083-1.362c.775-.258 1.162-.387 1.526-.56q.647-.308 1.211-.749c.318-.248.607-.537 1.184-1.114m9.448-9.448a3.932 3.932 0 0 0-5.561-5.561l-.887.887l.038.111a8.75 8.75 0 0 0 2.092 3.32a8.75 8.75 0 0 0 3.431 2.13z\"></path>\n        </svg>\n    )\n};\n\nconst CheckIcon = (props: SVGProps<SVGSVGElement>) => {\n    return (\n        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1em\" height=\"1em\" viewBox=\"0 0 24 24\" {...props}>\n            <path fill=\"currentColor\" d=\"m9 20.42l-6.21-6.21l2.83-2.83L9 14.77l9.88-9.89l2.83 2.83z\"></path>\n        </svg>\n    )\n};\n\nexport default function Input1() {\n    const [text, setText] = useState<string>(\"Javascript\");\n    const [isEditing, setIsEditing] = useState<boolean>(false);\n    const [isInputFocused, setIsInputFocused] = useState<boolean>(false);\n    const inputRef = useRef<HTMLInputElement>(null);\n\n    useEffect(() => {\n        if (isEditing) {\n            setIsInputFocused(true);\n            const input = inputRef.current;\n            if (input) {\n                const length = input.value.length;\n                input.setSelectionRange(length, length);\n                input.focus();\n            }\n        } else {\n            setIsInputFocused(false);\n            inputRef.current?.blur();\n        }\n    }, [isEditing]);\n\n    const onEditTextClicked = () => {\n        setIsEditing(true);\n    };\n\n    const onSaveTextClicked = () => {\n        setIsEditing(false);\n    };\n\n    const buttonVariants = {\n        initial: { rotate: -90, opacity: 0 },\n        animate: { rotate: 0, opacity: 1 },\n        exit: { rotate: 90, opacity: 0 }\n    };\n\n    return (\n        <Badge variant=\"outline\" className={`rounded-md px-2 py-1 flex flex-row items-center ${isInputFocused ? 'border-primary' : ''} transition-all duration-400 ease-in-out`}>\n            <input\n                ref={inputRef}\n                type=\"text\"\n                className=\"w-auto min-w-16 outline-0 border-transparent text-muted-foreground focus-visible:text-foreground text-base md:text-sm\"\n                value={text}\n                size={text.length === 0 ? 1 : text.length}\n                disabled={!isEditing}\n                onChange={(event) => setText(event.target.value)}\n            />\n            <div className=\"relative w-8 h-8 flex items-center justify-center\">\n                <AnimatePresence mode=\"popLayout\" initial={false}>\n                    {!isEditing ? (\n                        <motion.button\n                            key=\"edit\"\n                            className=\"cursor-pointer rounded-full bg-secondary text-muted-foreground hover:text-primary p-2 absolute\"\n                            onClick={() => onEditTextClicked()}\n                            initial=\"initial\"\n                            animate=\"animate\"\n                            exit=\"exit\"\n                            variants={buttonVariants}\n                            transition={{\n                                duration: 0.4,\n                                ease: \"easeInOut\",\n                            }}\n                        >\n                            <EditIcon width={12} height={12} />\n                        </motion.button>\n                    ) : (\n                        <motion.button\n                            key=\"save\"\n                            className=\"cursor-pointer rounded-full bg-primary hover:bg-primary/80 text-primary-foreground p-2 absolute\"\n                            onClick={() => onSaveTextClicked()}\n                            initial=\"initial\"\n                            animate=\"animate\"\n                            exit=\"exit\"\n                            variants={buttonVariants}\n                            transition={{\n                                duration: 0.4,\n                                ease: \"easeInOut\",\n                            }}\n                        >\n                            <CheckIcon width={12} height={12} />\n                        </motion.button>\n                    )}\n                </AnimatePresence>\n            </div>\n        </Badge>\n    );\n}",
      "type": "registry:component"
    }
  ]
}
{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "button1",
  "type": "registry:component",
  "title": "Button1",
  "description": "Button1",
  "dependencies": [
    "motion"
  ],
  "registryDependencies": [
    "button"
  ],
  "files": [
    {
      "path": "src/registry/components/button1.tsx",
      "content": "'use client';\n\nimport { Button } from \"@/components/ui/button\";\nimport { motion } from 'motion/react';\nimport React, { SVGProps, useEffect, useRef, useState } from \"react\";\n\nconst ArrowForwardIcon = (props: SVGProps<SVGSVGElement>) => (\n  <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1em\" height=\"1em\" viewBox=\"0 0 24 24\" {...props}>\n    <path fill=\"currentColor\" d=\"M16.175 13H4v-2h12.175l-5.6-5.6L12 4l8 8l-8 8l-1.425-1.4z\" />\n  </svg>\n);\n\nconst animationVariants = {\n  icon: {\n    initial: { opacity: 1 },\n    hover: (buttonWidth: number) => ({\n      x: -1 * buttonWidth,\n      opacity: 0,\n    }),\n  },\n  label: {\n    initial: { x: '0%' },\n    hover: { x: '-20%' },\n  },\n  arrow: {\n    initial: {\n      position: 'absolute' as const,\n      x: '100%',\n      opacity: 0\n    },\n    hover: {\n      x: 0,\n      opacity: 1\n    },\n  }\n};\n\nconst animationTransition = {\n  type: 'spring',\n  stiffness: 100,\n  damping: 20,\n};\n\nconst LogosGoogleIcon = (props: SVGProps<SVGSVGElement>) => {\n  return (\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"0.98em\" height=\"1em\" viewBox=\"0 0 256 262\" {...props}><path fill=\"#4285F4\" d=\"M255.878 133.451c0-10.734-.871-18.567-2.756-26.69H130.55v48.448h71.947c-1.45 12.04-9.283 30.172-26.69 42.356l-.244 1.622l38.755 30.023l2.685.268c24.659-22.774 38.875-56.282 38.875-96.027\"></path><path fill=\"#34A853\" d=\"M130.55 261.1c35.248 0 64.839-11.605 86.453-31.622l-41.196-31.913c-11.024 7.688-25.82 13.055-45.257 13.055c-34.523 0-63.824-22.773-74.269-54.25l-1.531.13l-40.298 31.187l-.527 1.465C35.393 231.798 79.49 261.1 130.55 261.1\"></path><path fill=\"#FBBC05\" d=\"M56.281 156.37c-2.756-8.123-4.351-16.827-4.351-25.82c0-8.994 1.595-17.697 4.206-25.82l-.073-1.73L15.26 71.312l-1.335.635C5.077 89.644 0 109.517 0 130.55s5.077 40.905 13.925 58.602z\"></path><path fill=\"#EB4335\" d=\"M130.55 50.479c24.514 0 41.05 10.589 50.479 19.438l36.844-35.974C195.245 12.91 165.798 0 130.55 0C79.49 0 35.393 29.301 13.925 71.947l42.211 32.783c10.59-31.477 39.891-54.251 74.414-54.251\"></path></svg>\n  )\n};\n\nexport default function Button1() {\n  const [isHovered, setIsHovered] = useState(false);\n  const [buttonWidth, setButtonWidth] = useState(0);\n  const buttonRef = useRef<HTMLButtonElement>(null);\n\n  useEffect(() => {\n    const currentRef = buttonRef.current;\n    if (currentRef) {\n      setButtonWidth(currentRef.offsetWidth);\n    }\n  }, [buttonRef]);\n\n  return (\n    <Button\n      ref={buttonRef}\n      variant=\"secondary\"\n      size=\"lg\"\n      className=\"cursor-pointer relative overflow-hidden\"\n      onMouseEnter={() => setIsHovered(true)}\n      onMouseLeave={() => setIsHovered(false)}>\n      <motion.div\n        initial=\"initial\"\n        animate={isHovered ? \"hover\" : \"initial\"}\n        variants={animationVariants.icon}\n        custom={buttonWidth}\n        transition={animationTransition}\n      >\n        <LogosGoogleIcon />\n      </motion.div>\n\n      <motion.div\n        initial=\"initial\"\n        animate={isHovered ? \"hover\" : \"initial\"}\n        variants={animationVariants.label}\n        transition={animationTransition}\n      >\n        <span>Sign in with Google</span>\n      </motion.div>\n\n      <motion.div\n        initial=\"initial\"\n        animate={isHovered ? \"hover\" : \"initial\"}\n        variants={animationVariants.arrow}\n        transition={{\n          ...animationTransition,\n          delay: 0.1\n        }}\n        style={{\n          right: Math.round(buttonWidth * 0.1)\n        }}\n      >\n        <ArrowForwardIcon />\n      </motion.div>\n    </Button>\n  );\n};",
      "type": "registry:component"
    }
  ]
}